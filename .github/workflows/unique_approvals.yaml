name: unique-pr-approvals
on: 
  pull_request_review:
    types:
      - submitted

jobs:
  check-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Get PR Number 
        id: get-pr-number
        run: |
          pr_number=$(echo "${{ github.event.pull_request.url }}" | awk -F'/' '{print $NF}')
          echo "::set-output name=val::${pr_number}"

      - name: Get Previous Review
        id: get-prev-review
        run: |
          pr_number=${{ steps.get-pr-number.outputs.val }}
          reviews=$(curl -s -X GET \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${pr_number}/reviews")

          # !!! CHANGE THIS IF THE NUMBER OF NEEDED REVIEWS CHANGE !!!
          # this part is subject to change (could be removed)
          max_reviews=2
          reviews_count=$(echo "$reviews" | jq length)
          if [ ${reviews_count} -ge ${max_reviews} ]; then
            echo "Error: the PR has at least ${max_reviews} reviews already."
            exit 1 # this should terminate the job
          fi

          if [ $reviews_count -gt 0 ]; then
            # the jq part should be considered 
            last_review=$(echo "${reviews}" | jq -r 'map(select(.state == "APPROVED")) | last')
            last_reviewer_grp=$(echo "${last_reviewer_grp}" | jq -r '.author_association')

          else
            echo "::set-output name=grp::''"
          fi

          echo "::set-output name=grp::${last_reviewer_grp}"


      - name: Check if the current review is valid
        id: valid-curr-review 
        run: |
          prev_grp="${{ steps.get-prev-review.outputs.grp }}" 

          if [ -n ${prev_grp} ]; then
            current_grp=$(curl -s -X GET \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/users/${{ github.actor }}/repos" | jq -r '.[].owner.type')

            # checking if the current and previous groups are unique
            if [ ${current_grp} != ${prev_grp} ]; then
              echo "::set-output name=res::'VALID'"

            else
              echo "::set-output name=res::'INVALID'"
            fi
            
          # no previous reviews
          else
            echo "::set-output name=res::'VALID'"
          fi

      
      - name: Accept PR
        if: ${{ steps.valid-curr-review.outputs.res == 'VALID' }}
        run: |
          review_content="${{ github.event.review.content }}"

          # try this if the one above doesn't work
          # review_content=$(echo "${{ github.event.review.content }}" | jq '.')
        
          pr_number=${{ steps.get-pr-number.outputs.val }}

          # this pushes the pr review
          curl -s -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -d "${review_content}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/reviews"
